// ===========================================
// FieldRow Component Styles
// ===========================================

@use "sass:math";
@import '../styles/variables';
@import '../styles/mixins';

.fieldRow {
  @include form-row();

  // Base row styling
  display: flex;
  flex-wrap: wrap;
  margin-right: $form-row-margin-right;
  margin-left: $form-row-margin-left;

  // Ensure child fields have proper spacing
  > :global([class*="field"]),
  > :global(.field) {
    padding-right: 5px;
    padding-left: 5px;
  }

  // No gutters variant
  &.noGutters {
    margin-right: 0;
    margin-left: 0;

    > :global([class*="field"]),
    > :global(.field) {
      padding-right: 0;
      padding-left: 0;
    }
  }

  // Gutter size variants
  &.gutterXs {
    margin-right: -2px;
    margin-left: -2px;

    > :global([class*="field"]),
    > :global(.field) {
      padding-right: 2px;
      padding-left: 2px;
    }
  }

  &.gutterSm {
    margin-right: -5px;
    margin-left: -5px;

    > :global([class*="field"]),
    > :global(.field) {
      padding-right: 5px;
      padding-left: 5px;
    }
  }

  &.gutterLg {
    margin-right: -10px;
    margin-left: -10px;

    > :global([class*="field"]),
    > :global(.field) {
      padding-right: 10px;
      padding-left: 10px;
    }
  }

  &.gutterXl {
    margin-right: -15px;
    margin-left: -15px;

    > :global([class*="field"]),
    > :global(.field) {
      padding-right: 15px;
      padding-left: 15px;
    }
  }

  // Flex direction variants
  &.directionRow {
    flex-direction: row;
  }

  &.directionColumn {
    flex-direction: column;
  }

  &.directionRowReverse {
    flex-direction: row-reverse;
  }

  &.directionColumnReverse {
    flex-direction: column-reverse;
  }

  // Flex wrap variants
  &.wrapNowrap {
    flex-wrap: nowrap;
  }

  &.wrapWrap {
    flex-wrap: wrap;
  }

  &.wrapWrapReverse {
    flex-wrap: wrap-reverse;
  }

  // Align items variants
  &.alignItemsStart {
    align-items: flex-start;
  }

  &.alignItemsCenter {
    align-items: center;
  }

  &.alignItemsEnd {
    align-items: flex-end;
  }

  &.alignItemsStretch {
    align-items: stretch;
  }

  &.alignItemsBaseline {
    align-items: baseline;
  }

  // Justify content variants
  &.justifyContentStart {
    justify-content: flex-start;
  }

  &.justifyContentCenter {
    justify-content: center;
  }

  &.justifyContentEnd {
    justify-content: flex-end;
  }

  &.justifyContentBetween {
    justify-content: space-between;
  }

  &.justifyContentAround {
    justify-content: space-around;
  }

  &.justifyContentEvenly {
    justify-content: space-evenly;
  }
}

// Debug mode styles
.debug {
  position: relative;
  border: 2px dashed rgba($warning, 0.5);
  background: rgba($warning, 0.05);

  &::before {
    content: 'FieldRow Debug';
    position: absolute;
    top: -25px;
    left: 0;
    font-size: 10px;
    color: $warning;
    background: rgba($warning, 0.1);
    padding: 2px 6px;
    border-radius: 2px;
    z-index: 1000;
    font-weight: bold;
  }

  &::after {
    content: 'Flex Container';
    position: absolute;
    bottom: -20px;
    right: 0;
    font-size: 9px;
    color: rgba($warning, 0.8);
    background: rgba($warning, 0.1);
    padding: 1px 4px;
    border-radius: 2px;
  }
}

// Responsive adjustments
@include media-breakpoint-down(sm) {
  .fieldRow {
    // On small screens, stack fields vertically by default
    &.responsiveStack {
      flex-direction: column;

      > :global([class*="field"]),
      > :global(.field) {
        flex: 0 0 100%;
        max-width: 100%;
        margin-bottom: math.div($form-group-margin-bottom, 2);
      }
    }
  }
}

// Special handling for nested rows
.fieldRow {
  .fieldRow {
    margin-right: 0;
    margin-left: 0;

    > :global([class*="field"]),
    > :global(.field) {
      padding-right: math.div($grid-gutter-width, 4);
      padding-left: math.div($grid-gutter-width, 4);
    }
  }
}

// Form validation state propagation
.fieldRow {
  // When any child field has an error, add visual indication to row
  &:has(:global(.hasError)) {
    .debug::before {
      color: $danger;
      background: rgba($danger, 0.1);
      content: 'FieldRow Debug - Contains Errors';
    }
  }

  // When all child fields are valid, add visual indication to row (in debug mode)
  &.debug:has(:global(.hasSuccess)):not(:has(:global(.hasError))) {
    border-color: rgba($success, 0.3);
    background: rgba($success, 0.02);

    &::before {
      color: $success;
      background: rgba($success, 0.1);
      content: 'FieldRow Debug - All Valid';
    }
  }
}

// Clearfix for older browser support
.fieldRow {
  @include clearfix();
}
