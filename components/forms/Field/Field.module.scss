// ===========================================
// Field Component Styles
// ===========================================

@import '../styles/variables';
@import '../styles/mixins';

.field {
  @include make-col-ready();
  @include form-group();

  // Base field styling
  position: relative;

  // Size variants
  &.size-sm {
    .fieldContent {
      :global(.form-control) {
        @include form-control-size(
          $input-height-sm,
          $input-padding-y-sm,
          $input-padding-x-sm,
          $input-font-size-sm,
          $input-border-radius-sm
        );
      }
    }
  }

  &.size-lg {
    .fieldContent {
      :global(.form-control) {
        @include form-control-size(
          $input-height-lg,
          $input-padding-y-lg,
          $input-padding-x-lg,
          $input-font-size-lg,
          $input-border-radius-lg
        );
      }
    }
  }

  // Text alignment
  &.textAlignCenter {
    text-align: center;

    .fieldContent {
      :global(.form-control) {
        text-align: center;
      }
    }
  }

  &.textAlignRight {
    text-align: right;

    .fieldContent {
      :global(.form-control) {
        text-align: right;
      }
    }
  }

  // Loading state
  &.loading {
    .fieldContent {
      position: relative;
      pointer-events: none;

      &::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba($white, 0.7);
        z-index: 1;
        border-radius: $input-border-radius;
      }

      &::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 20px;
        height: 20px;
        margin: -10px 0 0 -10px;
        border: 2px solid $gray-300;
        border-top: 2px solid $primary;
        border-radius: 50%;
        animation: fieldLoading 1s linear infinite;
        z-index: 2;
      }

      :global(.form-control) {
        @include loading-skeleton();
      }
    }
  }

  // Disabled state
  &.disabled {
    .fieldContent {
      :global(.form-control) {
        background-color: $input-disabled-bg;
        border-color: $input-disabled-border-color;
        opacity: 0.6;
        cursor: not-allowed;
      }
    }
  }

  // Offset label - adds spacing to align with fields that have labels
  &.offsetLabel {
    @include field-label-offset();
  }

  // Error state
  &.hasError {
    .fieldContent {
      :global(.form-control) {
        border-color: $form-feedback-invalid-color;

        &:focus {
          border-color: $form-feedback-invalid-color;
          box-shadow: 0 0 0 $input-focus-width rgba($form-feedback-invalid-color, 0.25);
        }
      }
    }
  }

  // Success state (when validation passes)
  &.hasSuccess {
    .fieldContent {
      :global(.form-control) {
        border-color: $form-feedback-valid-color;

        &:focus {
          border-color: $form-feedback-valid-color;
          box-shadow: 0 0 0 $input-focus-width rgba($form-feedback-valid-color, 0.25);
        }
      }
    }
  }
}

// Field content wrapper
.fieldContent {
  position: relative;

  // Apply form-control styles to common input elements
  :global {
    .form-control {
      @include form-control-base();
    }

    // Select styling
    select.form-control {
      &:focus::-ms-value {
        color: $input-color;
        background-color: $input-bg;
      }
    }

    // Textarea specific styles
    textarea.form-control {
      height: auto;
      resize: vertical;
    }

    // File input styles
    input[type="file"].form-control {
      height: auto;
      padding: $input-padding-y $input-padding-x;
    }
  }
}

// Responsive grid columns
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: if($breakpoint == xs, '', '-#{$breakpoint}');

    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {
        @include make-col($i, $grid-columns);
      }
    }

    // Auto column
    .col#{$infix} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }

    // Auto width
    .col#{$infix}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: 100%;
    }
  }
}

// Debug mode styles
.debug {
  &::before {
    content: 'Field Debug: ' attr(data-field-id);
    position: absolute;
    top: -20px;
    left: 0;
    font-size: 10px;
    color: $info;
    background: rgba($info, 0.1);
    padding: 2px 4px;
    border-radius: 2px;
    z-index: 1000;
  }

  border: 1px dashed rgba($info, 0.3) !important;

  .fieldContent {
    position: relative;

    &::after {
      content: 'Content Area';
      position: absolute;
      bottom: -15px;
      right: 0;
      font-size: 9px;
      color: rgba($info, 0.7);
    }
  }
}

// Animation keyframes
@keyframes fieldLoading {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

// Screen reader only utility
.srOnly {
  @include sr-only();
}

// Form control focus enhancement
.fieldContent :global(.form-control:focus) {
  z-index: 3;
}
